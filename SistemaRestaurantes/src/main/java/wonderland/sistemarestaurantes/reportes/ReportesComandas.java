/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package wonderland.sistemarestaurantes.reportes;

import com.itextpdf.text.Document;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Font;
import java.awt.Point;
import java.io.File;
import java.io.FileOutputStream;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import wonderland.sistemarestaurantes.control.ControlPresentacion;
import wonderland.sistemarestaurantes.utils.FontManager;
import wonderland.sistemarestaurantesdominio.dtos.ComandaDTO;
import wonderland.sistemarestaurantesdominio.dtos.DetalleComandaDTO;
import wonderland.sistemarestaurantesnegocio.IComandasBO;
import wonderland.sistemarestaurantesnegocio.IDetallesComandasBO;
import wonderland.sistemarestaurantesnegocio.exceptions.NegocioException;




public class ReportesComandas extends javax.swing.JFrame {
    
    FontManager fontManager = new FontManager();
    private IComandasBO comandasBO;
    private IDetallesComandasBO detallesComandasBO;
    

    public ReportesComandas(ControlPresentacion controlPresentacion, IComandasBO comandasBO, IDetallesComandasBO detallesComandasBO) {
        initComponents();
        setLocationRelativeTo(null);
        
        this.comandasBO = comandasBO;
        this.detallesComandasBO=detallesComandasBO;
        
        mostrarTodasLasComandas();
        jPanelComandas.setOpaque(false);
        jScrollPaneComandas.setOpaque(false);
        jScrollPaneComandas.getViewport().setOpaque(false);
        jScrollPaneComandas.setBorder(null);
        

    }
    
    public void mostrarTodasLasComandas() {
        try {
            List<ComandaDTO> comandas = comandasBO.obtenerComandas();
            actualizarListaComandas(comandas);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar comandas: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void actualizarListaComandas(List<ComandaDTO> comandas) {
        jPanelComandas.removeAll(); 

        if (comandas.isEmpty()) {
            JLabel lblMensaje = new JLabel("No hay comandas en el rango seleccionado");
            lblMensaje.setFont(new Font("Arial", Font.PLAIN, 16));
            lblMensaje.setHorizontalAlignment(SwingConstants.CENTER);
            jPanelComandas.add(lblMensaje);
        } else {
            for (ComandaDTO comanda : comandas) {
                PanelReporteComanda panel = new PanelReporteComanda(comanda, detallesComandasBO);
                jPanelComandas.add(panel);
            }
        }

        jPanelComandas.revalidate();
        jPanelComandas.repaint();

        SwingUtilities.invokeLater(() -> {
            jScrollPaneComandas.getViewport().setViewPosition(new Point(0, 0));
        });
    }
    
    private void aplicarFiltroPorFechas() {
        LocalDate fechaInicio = pickerFechaInicio.getDate();
        LocalDate fechaFin = pickerFechaFin.getDate();
        System.out.println("[DEBUG] Filtrando entre: " + fechaInicio + " y " + fechaFin);

        try {
            List<ComandaDTO> comandas;
            if (fechaInicio == null || fechaFin == null) {
                comandas = comandasBO.obtenerComandas();
                System.out.println("[DEBUG] Sin filtro. Total comandas: " + comandas.size());
            } else {
                Calendar inicio = convertLocalDateToCalendar(fechaInicio);
                Calendar fin = convertLocalDateToCalendar(fechaFin);
                comandas = comandasBO.obtenerComandasPorFechas(inicio, fin);
                System.out.println("[DEBUG] Comandas filtradas: " + comandas.size());
            }

            actualizarListaComandas(comandas);
        } catch (Exception ex) {
            System.err.println("[ERROR] Al filtrar: " + ex.getMessage());
            JOptionPane.showMessageDialog(this, "Error al filtrar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTotalVenta = new javax.swing.JLabel();
        jLabelEstado = new javax.swing.JLabel();
        jLabelFechaHora = new javax.swing.JLabel();
        jLabelMesa = new javax.swing.JLabel();
        jLabelNombre = new javax.swing.JLabel();
        jLabelFolio = new javax.swing.JLabel();
        jButtonFiltrar = new javax.swing.JButton();
        jLabelFechaFin = new javax.swing.JLabel();
        jLabelFechaInicio = new javax.swing.JLabel();
        jScrollPaneComandas = new javax.swing.JScrollPane();
        jPanelComandas = new javax.swing.JPanel();
        jButtonGenerarReporte = new javax.swing.JButton();
        pickerFechaFin = new com.github.lgooddatepicker.components.DatePicker();
        pickerFechaInicio = new com.github.lgooddatepicker.components.DatePicker();
        jLabelFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelTotalVenta.setFont(fontManager.getNotoSerifCondensedRegular(20f)
        );
        jLabelTotalVenta.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTotalVenta.setText("Total Venta");
        getContentPane().add(jLabelTotalVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 300, -1, -1));

        jLabelEstado.setFont(fontManager.getNotoSerifCondensedRegular(20f)
        );
        jLabelEstado.setForeground(new java.awt.Color(255, 255, 255));
        jLabelEstado.setText("Estado");
        getContentPane().add(jLabelEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 300, -1, -1));

        jLabelFechaHora.setFont(fontManager.getNotoSerifCondensedRegular(20f)
        );
        jLabelFechaHora.setForeground(new java.awt.Color(255, 255, 255));
        jLabelFechaHora.setText("Fecha/Hora");
        getContentPane().add(jLabelFechaHora, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 300, -1, -1));

        jLabelMesa.setFont(fontManager.getNotoSerifCondensedRegular(20f)
        );
        jLabelMesa.setForeground(new java.awt.Color(255, 255, 255));
        jLabelMesa.setText("Mesa");
        getContentPane().add(jLabelMesa, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 300, -1, -1));

        jLabelNombre.setFont(fontManager.getNotoSerifCondensedRegular(20f)
        );
        jLabelNombre.setForeground(new java.awt.Color(255, 255, 255));
        jLabelNombre.setText("Nombre Cliente");
        getContentPane().add(jLabelNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 300, -1, -1));

        jLabelFolio.setFont(fontManager.getNotoSerifCondensedRegular(20f)
        );
        jLabelFolio.setForeground(new java.awt.Color(255, 255, 255));
        jLabelFolio.setText("Folio");
        getContentPane().add(jLabelFolio, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 300, -1, -1));

        jButtonFiltrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BotonBuscar_1.png"))); // NOI18N
        jButtonFiltrar.setContentAreaFilled(false);
        jButtonFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFiltrarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonFiltrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 220, 60, 60));

        jLabelFechaFin.setFont(fontManager.getNotoSerifCondensedRegular(20f)
        );
        jLabelFechaFin.setForeground(new java.awt.Color(255, 255, 255));
        jLabelFechaFin.setText("Fecha Fin:");
        getContentPane().add(jLabelFechaFin, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 230, -1, 40));

        jLabelFechaInicio.setFont(fontManager.getNotoSerifCondensedRegular(20f)
        );
        jLabelFechaInicio.setForeground(new java.awt.Color(255, 255, 255));
        jLabelFechaInicio.setText("Fecha Inicio:");
        getContentPane().add(jLabelFechaInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 230, -1, 40));

        jScrollPaneComandas.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanelComandas.setLayout(new javax.swing.BoxLayout(jPanelComandas, javax.swing.BoxLayout.Y_AXIS));
        jScrollPaneComandas.setViewportView(jPanelComandas);

        getContentPane().add(jScrollPaneComandas, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 350, 870, 310));

        jButtonGenerarReporte.setFont(fontManager.getNunitoBold(16f)
        );
        jButtonGenerarReporte.setForeground(new java.awt.Color(255, 255, 255));
        jButtonGenerarReporte.setText("Descargar Reporte");
        jButtonGenerarReporte.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButtonGenerarReporte.setContentAreaFilled(false);
        jButtonGenerarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerarReporteActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonGenerarReporte, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 680, 180, 40));
        getContentPane().add(pickerFechaFin, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 234, 190, 30));
        getContentPane().add(pickerFechaInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 234, 190, 30));

        jLabelFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/FondoReportesComandas.png"))); // NOI18N
        getContentPane().add(jLabelFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static Calendar convertLocalDateToCalendar(LocalDate localDate) {
        Calendar calendar = Calendar.getInstance();
        calendar.clear();
        calendar.set(localDate.getYear(), 
                     localDate.getMonthValue() - 1,  
                     localDate.getDayOfMonth());
        return calendar;
    }
   
    private void jButtonGenerarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerarReporteActionPerformed
        Document documento = new Document();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar reporte como...");
        fileChooser.setSelectedFile(new File("Reporte.pdf"));

        if (fileChooser.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) {
            return; 
        }
        
        File outputFile = fileChooser.getSelectedFile();

        try{
            LocalDate fechaInicio = pickerFechaInicio.getDate();
            LocalDate fechaFin = pickerFechaFin.getDate();

            PdfWriter.getInstance(documento, new FileOutputStream(fileChooser.getSelectedFile()));

            documento.open();
            PdfPTable tabla = new PdfPTable(6);
            tabla.addCell("Folio");
            tabla.addCell("Fecha Registro");
            tabla.addCell("Estado");
            tabla.addCell("Total Venta");
            tabla.addCell("Mesa");
            tabla.addCell("Cliente");

            List<ComandaDTO> comandasDTO;
            if(fechaInicio == null || fechaFin == null){
                comandasDTO = this.comandasBO.obtenerComandas();
            } else {
                Calendar calendarFechaInicio = convertLocalDateToCalendar(fechaInicio);
                Calendar calendarFechaFin = convertLocalDateToCalendar(fechaFin);

                comandasDTO = this.comandasBO.obtenerComandasPorFechas(calendarFechaInicio, calendarFechaFin);
            }

            for (ComandaDTO comanda : comandasDTO) {
                Calendar calendar = comanda.getFechaHoraCreacion();
                String fechaHoraStr = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")
                .format(calendar.toInstant().atZone(ZoneId.systemDefault()));

            
                float total = 0f;
                List <DetalleComandaDTO> detalles = detallesComandasBO.obtenerDetallesDTOPorComanda(comanda);
                for (DetalleComandaDTO detalle : detalles) {
                    total += detalle.getPrecio() * detalle.getCantidadProducto();
               }
                
                tabla.addCell(comanda.getFolio() != null ? comanda.getFolio() : "");
                tabla.addCell(fechaHoraStr);
                
                tabla.addCell(comanda.getEstadoComanda() != null ? comanda.getEstadoComanda().toString() : "SIN ESTADO");
                tabla.addCell(String.format("$%.2f", total)); // Total (uwu)
                tabla.addCell(comanda.getMesa() != null ? String.valueOf(comanda.getMesa().getNumeroMesa()) : "");

                tabla.addCell(comanda.getCliente() != null && comanda.getCliente().getNombreCompleto() != null 
                    ? comanda.getCliente().getNombreCompleto() 
                    : "Sin cliente");                           
            }

            documento.add(tabla);
            
            JOptionPane.showMessageDialog(
                this, 
                "Reporte generado con éxito en:\n" + outputFile.getAbsolutePath(), 
                "Éxito", 
                JOptionPane.INFORMATION_MESSAGE
            );
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error al generar PDF: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            if (documento != null && documento.isOpen()) {
                documento.close();
            }
        }
    }//GEN-LAST:event_jButtonGenerarReporteActionPerformed

    private void jButtonFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFiltrarActionPerformed
        aplicarFiltroPorFechas();
    }//GEN-LAST:event_jButtonFiltrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFiltrar;
    private javax.swing.JButton jButtonGenerarReporte;
    private javax.swing.JLabel jLabelEstado;
    private javax.swing.JLabel jLabelFechaFin;
    private javax.swing.JLabel jLabelFechaHora;
    private javax.swing.JLabel jLabelFechaInicio;
    private javax.swing.JLabel jLabelFolio;
    private javax.swing.JLabel jLabelFondo;
    private javax.swing.JLabel jLabelMesa;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JLabel jLabelTotalVenta;
    private javax.swing.JPanel jPanelComandas;
    private javax.swing.JScrollPane jScrollPaneComandas;
    private com.github.lgooddatepicker.components.DatePicker pickerFechaFin;
    private com.github.lgooddatepicker.components.DatePicker pickerFechaInicio;
    // End of variables declaration//GEN-END:variables
}
